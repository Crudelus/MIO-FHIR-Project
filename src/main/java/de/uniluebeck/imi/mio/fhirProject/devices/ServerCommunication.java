package de.uniluebeck.imi.mio.fhirProject.devices;

import java.util.ArrayList;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.model.dstu.resource.Device;
import ca.uhn.fhir.model.dstu.resource.OperationOutcome;
import ca.uhn.fhir.model.primitive.IdDt;
import ca.uhn.fhir.rest.api.MethodOutcome;
import ca.uhn.fhir.rest.client.IGenericClient;

public class ServerCommunication {
	private IGenericClient client;
	private ArrayList<IdDt> generatedObjects = new ArrayList<IdDt>();

	public ServerCommunication(FhirContext ctx, String serverBase) {
		this.client = ctx.newRestfulGenericClient(serverBase);
	}

	/**
	 * @param device
	 *            the Device that will be created
	 * @return MethodOutcome for create Method, to get ID generated by the
	 *         server use .getID()
	 */
	public MethodOutcome createDeviceOnServer(Device device) {
		MethodOutcome outcome = client.create().resource(device).prettyPrint()
				.encodedJson().execute();
		
		generatedObjects.add(outcome.getId());
		return outcome;
	}

	/**
	 * @param devID
	 *            the reference for the device
	 * @return the device
	 */
	public Device getDevice(IdDt devID) {
		return client.read(Device.class, devID);
	}

	/**
	 * @param device the device
	 * @return true if updated, else false
	 */
	public boolean updateDevice(Device device) {
		try {
			client.update().resource(device).execute();
			return true;
		} catch (Exception e) {
			System.err.println("update failed");
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * @param deviceID
	 * @return true if deleted false if error
	 */
	public boolean deleteDevice(IdDt deviceID) {
		try {
			OperationOutcome outcome = client.delete().resourceById(deviceID)
					.execute();
			return true;
		} catch (Exception e) {
			System.err.println("delete failed");
			e.printStackTrace();
			return false;
		}
	}
	
	public void deleteAll(){
		for (IdDt id: generatedObjects ){

			deleteDevice(id);
		}
	}

}
